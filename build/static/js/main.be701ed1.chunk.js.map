{"version":3,"sources":["styled-components/index.js","components/CharacterList/index.js","pages/Character/index.js","App.js","serviceWorker.js","index.js"],"names":["ALink","styled","a","BoldText","span","CardSection","footer","div","CharacterCard","item","client","useApolloClient","history","useHistory","Card","Image","src","image","wrapped","ui","Content","CardHeader","class","name","onClick","writeData","data","selectedCharID","id","push","Icon","Description","species","gender","GET_CHARACTERS","gql","Characters","characters","useQuery","map","i","Grid","Column","key","Dimmer","active","Loader","size","CharacterList","columns","doubling","GET_CHARACTER","GET_CHARACTER_CLIENT","Char","Segment","Item","Group","verticalAlign","Header","status","location","Button","style","marginTop","as","positive","Character","charIdClient","character","variables","App","margin","exact","path","Boolean","window","hostname","match","cache","InMemoryCache","ApolloClient","uri","clientState","defaults","async","persistCache","storage","localStorage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be701ed1.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const ALink = styled.a`\n  color: black;\n  &:hover {\n    color: #333366;\n  }\n`;\n\nexport const BoldText = styled.span`\n  font-family: \"Helvetica\";\n  font-size: 1.1em;\n`;\n\nexport const Footer = styled.footer`\n  position: fixed;\n  width: 100%;\n  left: 0;\n  bottom: 0;\n  background-color: #a6eee6ff;\n  font-size: 1.25em;\n  text-align: center;\n  font-weight: bold;\n`;\n\nexport const CardSection = styled.div`\n  color: black;\n`;\n","import React from \"react\";\nimport { useQuery, useApolloClient } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport {\n  Grid,\n  Image,\n  Card,\n  Dimmer,\n  Loader,\n  Icon,\n  CardHeader\n} from \"semantic-ui-react\";\nimport { ALink, BoldText } from \"../../styled-components/\";\nimport { useHistory } from \"react-router-dom\";\nimport { CardSection } from \"../../styled-components\";\n\nconst CharacterCard = ({ item }) => {\n  const client = useApolloClient();\n  let history = useHistory();\n\n  return (\n    <Card>\n      <Image src={item.image} wrapped ui={true} />\n      <Card.Content>\n        <CardHeader>\n          <div class=\"ui two column grid\">\n            <div class=\"row\">\n              <div class=\"column\">\n                {item.name}\n              </div>\n              <div class=\"column\">\n                <ALink\n                  onClick={() => {\n                    client.writeData({ data: { selectedCharID: item.id } });\n                    history.push(`/character/${item.id}`);\n                  }}\n                >\n                  <Icon name=\"hand point right\" />\n                  info\n                </ALink>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <Card.Description>\n          <CardSection>\n            <BoldText>Species:</BoldText> {item.species}\n          </CardSection>\n          <CardSection>\n            <BoldText>Gender:</BoldText> {item.gender}\n          </CardSection>\n        </Card.Description>\n      </Card.Content>\n    </Card>\n  );\n};\n\nconst GET_CHARACTERS = gql`\n  query getCharacters {\n    characters {\n      id\n      name\n      status\n      species\n      gender\n      image\n    }\n  }\n`;\n\nconst Characters = () => {\n  const characters = useQuery(GET_CHARACTERS);\n\n  return characters.data ? (\n    characters.data.characters.map((data, i) => {\n      return (\n        <Grid.Column key={i}>\n          <CharacterCard item={data} />\n        </Grid.Column>\n      );\n    })\n  ) : (\n    <div>\n      <Dimmer active>\n        <Loader size=\"mini\">Loading ..</Loader>\n      </Dimmer>\n    </div>\n  );\n};\n\nconst CharacterList = () => (\n  <Grid columns={5} doubling>\n    <Characters />\n  </Grid>\n);\n\nexport default CharacterList;\n","import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport { Item, Icon, Dimmer, Loader, Segment, Button } from \"semantic-ui-react\";\nimport { useHistory } from \"react-router-dom\";\nimport { BoldText, CardSection } from \"../../styled-components\";\n\nconst GET_CHARACTER = gql`\n  query getCharacter($id: ID!) {\n    character(id: $id) {\n      id\n      name\n      status\n      species\n      gender\n      image\n      location {\n        name\n        url\n      }\n    }\n  }\n`;\n\nconst GET_CHARACTER_CLIENT = gql`\n  query getSelectedCharID {\n    selectedCharID @client\n  }\n`;\n\nconst Char = ({ item }) => {\n  let history = useHistory();\n\n  return (\n    <Segment>\n      <Item.Group>\n        <Item>\n          <Item.Image size=\"small\" src={item.image} />\n          <Item.Content verticalAlign=\"middle\">\n            <Item.Header>\n              {item.name}\n            </Item.Header>\n            <Item.Description>\n              <CardSection>\n                <BoldText>Species:</BoldText> {item.species}\n              </CardSection>\n              <CardSection>\n                <BoldText>Status:</BoldText> {item.status}\n              </CardSection>\n              <CardSection>\n                <BoldText>Gender:</BoldText> {item.gender}\n              </CardSection>\n              <CardSection>\n                <BoldText>Location:</BoldText> {item.location.name}\n              </CardSection>\n            </Item.Description>\n            <Button\n              style={{ marginTop: \"2em\" }}\n              as=\"a\"\n              onClick={() => history.push(\"/\")}\n              positive\n            >\n              <Icon name=\"left arrow\" />\n              go back\n            </Button>\n          </Item.Content>\n        </Item>\n      </Item.Group>\n    </Segment>\n  );\n};\n\nconst Character = () => {\n  const charIdClient = useQuery(GET_CHARACTER_CLIENT);\n  const character = useQuery(GET_CHARACTER, {\n    variables: { id: charIdClient.data.selectedCharID }\n  });\n\n  return character.data ? (\n    <Char item={character.data.character} />\n  ) : (\n    <div>\n      <Dimmer active>\n        <Loader size=\"mini\">Loading character..</Loader>\n      </Dimmer>\n    </div>\n  );\n};\n\nexport default Character;\n","import React from \"react\";\nimport CharacterList from \"./components/CharacterList\";\nimport Character from \"./pages/Character\";\nimport { BrowserRouter as Switch, Route } from \"react-router-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nconst App = () => {\n  return (\n    <div style={{ margin: \"3em 4em\" }}>\n      <Switch>\n        <Route exact path=\"/\">\n          <CharacterList />\n        </Route>\n        <Route exact path=\"/character/:id\">\n          <Character />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { persistCache } from \"apollo-cache-persist\";\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000\",\n  clientState: {\n    defaults: {\n      selectedCharID: -1\n    }\n  },\n  cache: cache\n});\n\nconst setupAndRender = async () => {\n  await persistCache({\n    cache,\n    storage: localStorage\n  });\n  ReactDOM.render(\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n  );\n};\n\nsetupAndRender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}